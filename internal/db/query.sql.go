// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createJobPosting = `-- name: CreateJobPosting :exec
INSERT INTO job_postings (
    id,
    title,
    company_name,
    prefecture_code,
    prefecture_name,
    municipality,
    summary_url,
    job_type,
    salary_min_amount,
    salary_max_amount,
    salary_unit,
    salary_currency,
    salary_is_fixed,
    posted_at,
    job_name,
    holiday_policy,
    raise,
    bonus,
    description,
    requirements,
    holidays_per_year,
    work_hours,
    benefits
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8,
    $9, $10, $11, $12, $13, $14,
    $15, $16, $17, $18, $19, $20, $21, $22, $23
)
`

type CreateJobPostingParams struct {
	ID              uuid.UUID
	Title           string
	CompanyName     string
	PrefectureCode  string
	PrefectureName  string
	Municipality    string
	SummaryUrl      string
	JobType         JobType
	SalaryMinAmount int64
	SalaryMaxAmount int64
	SalaryUnit      SalaryType
	SalaryCurrency  Currency
	SalaryIsFixed   bool
	PostedAt        time.Time
	JobName         string
	HolidayPolicy   string
	Raise           sql.NullInt32
	Bonus           sql.NullInt32
	Description     string
	Requirements    string
	HolidaysPerYear sql.NullInt32
	WorkHours       string
	Benefits        string
}

func (q *Queries) CreateJobPosting(ctx context.Context, arg CreateJobPostingParams) error {
	_, err := q.db.ExecContext(ctx, createJobPosting,
		arg.ID,
		arg.Title,
		arg.CompanyName,
		arg.PrefectureCode,
		arg.PrefectureName,
		arg.Municipality,
		arg.SummaryUrl,
		arg.JobType,
		arg.SalaryMinAmount,
		arg.SalaryMaxAmount,
		arg.SalaryUnit,
		arg.SalaryCurrency,
		arg.SalaryIsFixed,
		arg.PostedAt,
		arg.JobName,
		arg.HolidayPolicy,
		arg.Raise,
		arg.Bonus,
		arg.Description,
		arg.Requirements,
		arg.HolidaysPerYear,
		arg.WorkHours,
		arg.Benefits,
	)
	return err
}

const getJobPostingByID = `-- name: GetJobPostingByID :one
SELECT
    id,
    title,
    company_name,
    prefecture_code,
    prefecture_name,
    municipality,
    summary_url,
    job_type,
    salary_min_amount,
    salary_max_amount,
    salary_unit,
    salary_currency,
    salary_is_fixed,
    posted_at,
    job_name,
    holiday_policy,
    raise,
    bonus,
    description,
    requirements,
    holidays_per_year,
    work_hours,
    benefits
FROM job_postings
WHERE id = $1
`

type GetJobPostingByIDRow struct {
	ID              uuid.UUID
	Title           string
	CompanyName     string
	PrefectureCode  string
	PrefectureName  string
	Municipality    string
	SummaryUrl      string
	JobType         JobType
	SalaryMinAmount int64
	SalaryMaxAmount int64
	SalaryUnit      SalaryType
	SalaryCurrency  Currency
	SalaryIsFixed   bool
	PostedAt        time.Time
	JobName         string
	HolidayPolicy   string
	Raise           sql.NullInt32
	Bonus           sql.NullInt32
	Description     string
	Requirements    string
	HolidaysPerYear sql.NullInt32
	WorkHours       string
	Benefits        string
}

func (q *Queries) GetJobPostingByID(ctx context.Context, id uuid.UUID) (GetJobPostingByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getJobPostingByID, id)
	var i GetJobPostingByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CompanyName,
		&i.PrefectureCode,
		&i.PrefectureName,
		&i.Municipality,
		&i.SummaryUrl,
		&i.JobType,
		&i.SalaryMinAmount,
		&i.SalaryMaxAmount,
		&i.SalaryUnit,
		&i.SalaryCurrency,
		&i.SalaryIsFixed,
		&i.PostedAt,
		&i.JobName,
		&i.HolidayPolicy,
		&i.Raise,
		&i.Bonus,
		&i.Description,
		&i.Requirements,
		&i.HolidaysPerYear,
		&i.WorkHours,
		&i.Benefits,
	)
	return i, err
}
