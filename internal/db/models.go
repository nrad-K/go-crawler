// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type Currency string

const (
	CurrencyJPY Currency = "JPY"
	CurrencyUSD Currency = "USD"
)

func (e *Currency) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Currency(s)
	case string:
		*e = Currency(s)
	default:
		return fmt.Errorf("unsupported scan type for Currency: %T", src)
	}
	return nil
}

type NullCurrency struct {
	Currency Currency
	Valid    bool // Valid is true if Currency is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCurrency) Scan(value interface{}) error {
	if value == nil {
		ns.Currency, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Currency.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCurrency) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Currency), nil
}

type JobType string

const (
	JobTypeUnknown    JobType = "Unknown"
	JobTypeFullTime   JobType = "FullTime"
	JobTypePartTime   JobType = "PartTime"
	JobTypeContract   JobType = "Contract"
	JobTypeTemporary  JobType = "Temporary"
	JobTypeFreelance  JobType = "Freelance"
	JobTypeInternship JobType = "Internship"
	JobTypeOther      JobType = "Other"
)

func (e *JobType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = JobType(s)
	case string:
		*e = JobType(s)
	default:
		return fmt.Errorf("unsupported scan type for JobType: %T", src)
	}
	return nil
}

type NullJobType struct {
	JobType JobType
	Valid   bool // Valid is true if JobType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullJobType) Scan(value interface{}) error {
	if value == nil {
		ns.JobType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.JobType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullJobType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.JobType), nil
}

type SalaryType string

const (
	SalaryTypeHourly  SalaryType = "Hourly"
	SalaryTypeDaily   SalaryType = "Daily"
	SalaryTypeMonthly SalaryType = "Monthly"
	SalaryTypeYearly  SalaryType = "Yearly"
)

func (e *SalaryType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SalaryType(s)
	case string:
		*e = SalaryType(s)
	default:
		return fmt.Errorf("unsupported scan type for SalaryType: %T", src)
	}
	return nil
}

type NullSalaryType struct {
	SalaryType SalaryType
	Valid      bool // Valid is true if SalaryType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSalaryType) Scan(value interface{}) error {
	if value == nil {
		ns.SalaryType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SalaryType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSalaryType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SalaryType), nil
}

type JobPosting struct {
	ID              uuid.UUID
	Title           string
	CompanyName     string
	PrefectureCode  string
	PrefectureName  string
	Municipality    string
	SummaryUrl      string
	JobType         JobType
	SalaryMinAmount int64
	SalaryMaxAmount int64
	SalaryUnit      SalaryType
	SalaryCurrency  Currency
	SalaryIsFixed   bool
	PostedAt        time.Time
	JobName         string
	HolidayPolicy   string
	Raise           sql.NullInt32
	Bonus           sql.NullInt32
	Description     string
	Requirements    string
	HolidaysPerYear sql.NullInt32
	WorkHours       string
	Benefits        string
	CreatedAt       time.Time
}
