// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type HolidayPolicy string

const (
	HolidayPolicyCompleteTwoDaysAWeek HolidayPolicy = "CompleteTwoDaysAWeek"
	HolidayPolicyTwoDaysAWeek         HolidayPolicy = "TwoDaysAWeek"
	HolidayPolicyOneDayAWeek          HolidayPolicy = "OneDayAWeek"
	HolidayPolicyShiftSystem          HolidayPolicy = "ShiftSystem"
	HolidayPolicyUnknownHoliday       HolidayPolicy = "UnknownHoliday"
)

func (e *HolidayPolicy) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = HolidayPolicy(s)
	case string:
		*e = HolidayPolicy(s)
	default:
		return fmt.Errorf("unsupported scan type for HolidayPolicy: %T", src)
	}
	return nil
}

type NullHolidayPolicy struct {
	HolidayPolicy HolidayPolicy
	Valid         bool // Valid is true if HolidayPolicy is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullHolidayPolicy) Scan(value interface{}) error {
	if value == nil {
		ns.HolidayPolicy, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.HolidayPolicy.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullHolidayPolicy) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.HolidayPolicy), nil
}

type JobType string

const (
	JobTypeUnknown    JobType = "Unknown"
	JobTypeFullTime   JobType = "FullTime"
	JobTypePartTime   JobType = "PartTime"
	JobTypeContract   JobType = "Contract"
	JobTypeTemporary  JobType = "Temporary"
	JobTypeFreelance  JobType = "Freelance"
	JobTypeInternship JobType = "Internship"
	JobTypeOther      JobType = "Other"
)

func (e *JobType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = JobType(s)
	case string:
		*e = JobType(s)
	default:
		return fmt.Errorf("unsupported scan type for JobType: %T", src)
	}
	return nil
}

type NullJobType struct {
	JobType JobType
	Valid   bool // Valid is true if JobType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullJobType) Scan(value interface{}) error {
	if value == nil {
		ns.JobType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.JobType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullJobType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.JobType), nil
}

type SalaryType string

const (
	SalaryTypeHourly  SalaryType = "Hourly"
	SalaryTypeDaily   SalaryType = "Daily"
	SalaryTypeMonthly SalaryType = "Monthly"
	SalaryTypeYearly  SalaryType = "Yearly"
)

func (e *SalaryType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SalaryType(s)
	case string:
		*e = SalaryType(s)
	default:
		return fmt.Errorf("unsupported scan type for SalaryType: %T", src)
	}
	return nil
}

type NullSalaryType struct {
	SalaryType SalaryType
	Valid      bool // Valid is true if SalaryType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSalaryType) Scan(value interface{}) error {
	if value == nil {
		ns.SalaryType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SalaryType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSalaryType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SalaryType), nil
}

type WorkplaceType string

const (
	WorkplaceTypeOnsite           WorkplaceType = "Onsite"
	WorkplaceTypeRemote           WorkplaceType = "Remote"
	WorkplaceTypeHybrid           WorkplaceType = "Hybrid"
	WorkplaceTypeFullRemote       WorkplaceType = "FullRemote"
	WorkplaceTypeUnknownWorkplace WorkplaceType = "UnknownWorkplace"
)

func (e *WorkplaceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WorkplaceType(s)
	case string:
		*e = WorkplaceType(s)
	default:
		return fmt.Errorf("unsupported scan type for WorkplaceType: %T", src)
	}
	return nil
}

type NullWorkplaceType struct {
	WorkplaceType WorkplaceType
	Valid         bool // Valid is true if WorkplaceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWorkplaceType) Scan(value interface{}) error {
	if value == nil {
		ns.WorkplaceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WorkplaceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWorkplaceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WorkplaceType), nil
}

type Company struct {
	ID                         uuid.UUID
	Name                       string
	HeadquartersPrefectureCode string
	HeadquartersPrefectureName string
	HeadquartersMunicipality   string
	HeadquartersRaw            string
	CreatedAt                  time.Time
}

type JobBenefit struct {
	ID                   uuid.UUID
	JobPostingID         uuid.UUID
	SocialInsurance      bool
	TransportAllowance   bool
	HousingAllowance     bool
	CompanyHousing       bool
	RentSubsidy          bool
	MealAllowance        bool
	CafeteriaProvided    bool
	TrainingSupport      bool
	CertificationSupport bool
	PaidLeave            bool
	SpecialLeave         bool
	FlexTime             bool
	ShortWorkingHours    bool
	ChildcareSupport     bool
	MaternityLeave       bool
	ParentalLeave        bool
	ElderCareSupport     bool
	RetirementPlan       bool
	RawBenefits          string
	CreatedAt            time.Time
}

type JobPosting struct {
	ID              uuid.UUID
	CompanyID       uuid.UUID
	LocationID      uuid.UUID
	Title           string
	JobName         string
	SummaryUrl      string
	JobType         JobType
	SalaryMinAmount int64
	SalaryMaxAmount int64
	SalaryUnit      SalaryType
	SalaryIsFixed   bool
	Raise           sql.NullInt32
	Bonus           sql.NullInt32
	Description     string
	Requirements    string
	WorkplaceType   WorkplaceType
	WorkHours       string
	HolidaysPerYear sql.NullInt32
	HolidayPolicy   HolidayPolicy
	PostedAt        time.Time
	CreatedAt       time.Time
}

type Location struct {
	ID             uuid.UUID
	PrefectureCode string
	PrefectureName string
	Municipality   string
	RawLocation    string
	CreatedAt      time.Time
}
